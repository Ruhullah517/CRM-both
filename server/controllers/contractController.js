const GeneratedContract = require('../models/Contract');
const ContractTemplate = require('../models/ContractTemplate');
const { PDFDocument, StandardFonts, rgb } = require('pdf-lib');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const docusignService = require('../utils/docusign');
const { convert } = require('html-to-text');

// List all generated contracts
const getAllGeneratedContracts = async (req, res) => {
  try {
    const contracts = await GeneratedContract.find().populate('templateId').populate('generatedBy', 'name email');
    res.json(contracts);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
};

// Get a single generated contract by ID
const getGeneratedContract = async (req, res) => {
  try {
    const contract = await GeneratedContract.findById(req.params.id).populate('templateId').populate('generatedBy', 'name email');
    if (!contract) return res.status(404).json({ msg: 'Contract not found' });
    res.json(contract);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
};

// Generate a new contract from template and filled data
const generateContract = async (req, res) => {
  const { name, templateId, roleType, generatedBy, filledData, status } = req.body;
  
  // Valid status values
  const validStatuses = ['draft', 'pending', 'sent', 'delivered', 'signed', 'completed', 'declined', 'cancelled', 'expired'];
  const contractStatus = validStatuses.includes(status) ? status : 'draft';
  
  try {
    // Validate required fields
    if (!templateId) {
      return res.status(400).json({ msg: 'Template ID is required' });
    }
    
    if (!generatedBy) {
      return res.status(400).json({ msg: 'Generated By is required' });
    }

    // Fetch template and validate placeholders
    const template = await ContractTemplate.findById(templateId);
    if (!template) {
      return res.status(400).json({ msg: 'Template not found' });
    }

    // Fill template content
    let filledContent = template.content;
    if (filledData && typeof filledData === 'object') {
      Object.entries(filledData).forEach(([ph, val]) => {
        filledContent = filledContent.replace(new RegExp(`{{\\s*${ph}\\s*}}`, 'g'), val || `[${ph}]`);
      });
    }

    // Convert HTML to plain text for PDF generation
    const plainTextContent = convert(filledContent, {
      wordwrap: 80,
      preserveNewlines: true
    });

    // Generate PDF with new professional multi-page structure
    const pdfDoc = await PDFDocument.create();
    
    // Get standard A4 page dimensions (595.28 x 841.89 points)
    const width = 595.28;
    const height = 841.89;
    
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
    const italicFont = await pdfDoc.embedFont(StandardFonts.HelveticaOblique);
    
    // Load logo for use across pages (using logo-bg.png)
    let logoImage = null;
    try {
      const logoPaths = [
        path.join(__dirname, '../uploads/logo-bg.png'),
        path.join(__dirname, '../uploads/logo-bg.PNG'),
        path.join(__dirname, '../../client/public/logo-bg.png'),
        path.join(__dirname, '../../client/public/logo-bg.PNG'),
        // Fallback to original logos
        path.join(__dirname, '../uploads/logo.png'),
        path.join(__dirname, '../uploads/logo.PNG'),
        path.join(__dirname, '../../client/public/logo.PNG'),
        path.join(__dirname, '../../client/public/logo.png')
      ];
      
      for (const logoPath of logoPaths) {
        if (fs.existsSync(logoPath)) {
          const logoBytes = fs.readFileSync(logoPath);
          if (logoPath.toLowerCase().endsWith('.png')) {
            logoImage = await pdfDoc.embedPng(logoBytes);
          } else {
            logoImage = await pdfDoc.embedJpg(logoBytes);
          }
          console.log('Logo loaded from:', logoPath);
          break;
        }
      }
    } catch (error) {
      console.error('Error loading logo:', error);
    }
    
    // PAGE 1 - COVER PAGE
    const coverPage = pdfDoc.addPage();
    
    // Background color for cover page
    coverPage.drawRectangle({
      x: 0,
      y: 0,
      width: width,
      height: height,
      color: rgb(0.875, 0.392, 0.239), // #df643d
    });

    // Centered logo at the top (larger and wider size)
    if (logoImage) {
      const logoWidth = 180; // Increased width for more prominent appearance
      const logoHeight = 150; // Keep height proportional
      const logoX = (width - logoWidth) / 2;
      const logoY = height - 200;
      coverPage.drawImage(logoImage, {
        x: logoX,
        y: logoY,
        width: logoWidth,
        height: logoHeight,
      });
    }

    // Contract title (centered) - Use template name
    const contractTitle = template.name || filledData?.contract_title || name || 'Service Level Agreement';
    const titleWidth = boldFont.widthOfTextAtSize(contractTitle, 36);
    coverPage.drawText(contractTitle, {
      x: (width - titleWidth) / 2,
      y: height - 390, // Adjusted position for larger text
      size: 36, // Increased from 28 for more prominence
      font: boldFont,
      color: rgb(0, 0, 0),
    });

    // Optional subtitle
    const subtitle = 'Black Foster Carers Alliance';
    const subtitleWidth = font.widthOfTextAtSize(subtitle, 16);
    coverPage.drawText(subtitle, {
      x: (width - subtitleWidth) / 2,
      y: height - 430, // Adjusted position
      size: 16,
      font: font,
      color: rgb(0, 0, 0),
    });

    // No footer on cover page (as requested)

    // PAGE 2 - n (CONTENT PAGES)
    const contentPage = pdfDoc.addPage();
    
    // Background for content pages
    contentPage.drawRectangle({
      x: 0,
      y: 0,
      width: width,
      height: height,
      color: rgb(1, 1, 1), // White
    });

    // Logo at top-right corner (wider)
    if (logoImage) {
      const logoWidth = 80; // Increased width
      const logoHeight = 60;
      contentPage.drawImage(logoImage, {
        x: width - logoWidth - 20,
        y: height - logoHeight - 20,
        width: logoWidth,
        height: logoHeight,
      });
    }

    // Add template name as heading on first content page
    const templateName = template.name || 'Contract';
    const templateHeadingWidth = boldFont.widthOfTextAtSize(templateName, 20); // Increased size
    contentPage.drawText(templateName, {
      x: (width - templateHeadingWidth) / 2,
      y: height - 130, // Position below logo with more space
      size: 20, // Increased from 18 for bolder appearance
      font: boldFont,
      color: rgb(0, 0, 0),
    });

    // Add footer to first content page (wrapped in multiple lines)
    const footerLines = [
      '| BLACK FOSTER CARERS ALLIANCE | 6 St Michael\'s Court, West Bromwich,B70 8ET |',
      '| enquiries@blackfostercarersalliance.co.uk | www.blackfostercarersalliance.co.uk | 0800 001 6230 |',
      '| Registered Company No. 15210072 |'
    ];
    
    footerLines.forEach((line, index) => {
      const footerWidth = font.widthOfTextAtSize(line, 8);
      contentPage.drawText(line, {
        x: (width - footerWidth) / 2,
        y: 30 + (index * 12), // Stack lines vertically with 12pt spacing
        size: 8,
        font: font,
        color: rgb(0, 0, 0),
      });
    });

    // Render content with proper formatting
    const renderContent = (page, content, startY) => {
      let currentY = startY;
      const lineHeight = 16;
      const margin = 50;
      const maxWidth = width - (margin * 2);
      
      // Convert HTML to plain text and split into paragraphs
      const plainText = convert(content, {
        wordwrap: false,
        preserveNewlines: true
      });
      
      const paragraphs = plainText.split('\n\n');
      
      paragraphs.forEach(paragraph => {
        if (!paragraph.trim()) return;
        
        // Split paragraph by single newlines to handle line breaks
        const lines = paragraph.split('\n').filter(line => line.trim());
        
        lines.forEach(lineText => {
          // Check if we need a new page
          if (currentY < 120) { // Increased from 100 to accommodate footer
            // Create new page
            const newPage = pdfDoc.addPage();
            
            // Add logo to new page (wider)
            if (logoImage) {
              const logoWidth = 80; // Increased width
              const logoHeight = 60;
              newPage.drawImage(logoImage, {
                x: width - logoWidth - 20,
                y: height - logoHeight - 20,
                width: logoWidth,
                height: logoHeight,
              });
            }
            
            // Add footer to content pages (wrapped in multiple lines)
            const footerLines = [
              '| BLACK FOSTER CARERS ALLIANCE | 6 St Michael\'s Court, West Bromwich,B70 8ET |',
              '| enquiries@blackfostercarersalliance.co.uk | www.blackfostercarersalliance.co.uk | 0800 001 6230 |',
              '| Registered Company No. 15210072 |'
            ];
            
            footerLines.forEach((line, index) => {
              const footerWidth = font.widthOfTextAtSize(line, 8);
              newPage.drawText(line, {
                x: (width - footerWidth) / 2,
                y: 30 + (index * 12), // Stack lines vertically with 12pt spacing
                size: 8,
                font: font,
                color: rgb(0, 0, 0),
              });
            });
            
            currentY = height - 100;
            page = newPage; // Update page reference
          }
          
          // Split line into words that fit within maxWidth
          const words = lineText.trim().split(' ');
          let line = '';
          words.forEach((word) => {
            // Remove any remaining newline characters from word
            const cleanWord = word.replace(/[\n\r]/g, ' ').trim();
            if (!cleanWord) return;
            
            const testLine = line + (line ? ' ' : '') + cleanWord;
            const lineWidth = font.widthOfTextAtSize(testLine, 12);
            if (lineWidth > maxWidth && line) {
              page.drawText(line, {
                x: margin,
                    y: currentY, 
                size: 12,
                font: font,
                color: rgb(0, 0, 0),
                  });
                  currentY -= lineHeight;
              line = cleanWord;
                } else {
              line = testLine;
            }
          });
          if (line) {
            page.drawText(line, {
              x: margin,
              y: currentY,
              size: 12,
              font: font,
              color: rgb(0, 0, 0),
            });
          currentY -= lineHeight;
        }
        });
        
        currentY -= 10; // Extra spacing between paragraphs
      });
      
      return currentY;
    };
    
    // Render main content with margin below heading
    renderContent(contentPage, filledContent, height - 170); // Increased margin below heading

    // FINAL PAGE - CONTACT PAGE
    const contactPage = pdfDoc.addPage();
    
    // Background color for contact page
    contactPage.drawRectangle({
      x: 0,
      y: 0,
      width: width,
      height: height,
      color: rgb(0.875, 0.392, 0.239), // #df643d
    });

    // "Reach out to us" heading (left aligned, larger, white)
    const contactHeading = 'Reach out to us';
    contactPage.drawText(contactHeading, {
      x: 50, // Left aligned
      y: height - 200,
      size: 32, // Increased from 24 for more prominence
      font: boldFont,
      color: rgb(1, 1, 1), // White color
    });

    // Contact details with ASCII symbols and left alignment (white text)
    const contactDetails = [
      { icon: '[T]', text: '0800 001 6230' },
      { icon: '[E]', text: 'Enquiries@blackfostercarersalliance.co.uk' },
      { icon: '[C]', text: 'Blackfostercarersalliance' },
      { icon: '[W]', text: 'www.blackfostercarersalliance.co.uk' }
    ];

    let contactY = height - 280;
    contactDetails.forEach((detail, index) => {
      // Draw icon
      contactPage.drawText(detail.icon, {
        x: 50, // Left aligned
        y: contactY,
        size: 18,
        font: boldFont,
        color: rgb(1, 1, 1), // White color
      });
      
      // Draw text
      contactPage.drawText(detail.text, {
        x: 100, // Position text to the right of icon
        y: contactY,
        size: 16,
        font: font,
        color: rgb(1, 1, 1), // White color
      });
      contactY -= 50; // Increased spacing for better readability
    });

    // No footer on contact page (as requested)
    
    const pdfBytes = await pdfDoc.save();
    
    // Save PDF to disk
    const dirPath = path.join(__dirname, '../uploads/contracts');
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }
    
    const fileName = `contract_${Date.now()}.pdf`;
    const filePath = path.join(dirPath, fileName);
    fs.writeFileSync(filePath, pdfBytes);
    
    // Use the correct server URL for the generated document URL
    const serverUrl = process.env.SERVER_URL || 'https://crm-backend-0v14.onrender.com';
    const generatedDocUrl = `${serverUrl}/uploads/contracts/${fileName}`;
    
    console.log('PDF saved to:', filePath);
    console.log('Generated doc URL:', generatedDocUrl);
    console.log('File exists after save:', fs.existsSync(filePath));

    if (req.body._id) {
      // Update existing contract
      const updated = await GeneratedContract.findByIdAndUpdate(
        req.body._id,
        {
          name,
          templateId,
          roleType,
          generatedBy,
          filledData,
          generatedDocUrl,
          status: contractStatus,
        },
        { new: true }
      );
      res.status(200).json(updated);
    } else {
      // Create new contract
      const contract = new GeneratedContract({
        name,
        templateId,
        roleType,
        generatedBy,
        filledData,
        generatedDocUrl,
        status: contractStatus,
      });
      await contract.save();
      res.status(201).json(contract);
    }
  } catch (error) {
    console.error('Contract generation error:', error);
    res.status(500).json({ 
      msg: 'Server error during contract generation',
      error: error.message 
    });
  }
};

// Send contract for e-signature via DocuSign
const sendForSignature = async (req, res) => {
  try {
    const { id } = req.params;
    const { recipientEmail, recipientName } = req.body;
    const contract = await GeneratedContract.findById(id);
    
    if (!contract) return res.status(404).json({ msg: 'Contract not found' });
    if (!contract.generatedDocUrl) return res.status(400).json({ msg: 'Generated PDF not found' });
    if (!recipientEmail) return res.status(400).json({ msg: 'Recipient email is required' });

    // Build absolute path to PDF
    let filePath = contract.generatedDocUrl;
    if (filePath.startsWith('http')) {
      // If it's an absolute URL, extract the file path
      const url = new URL(filePath);
      filePath = url.pathname;
    }
    if (filePath.startsWith('/')) filePath = filePath.slice(1);
    const absPath = path.resolve(__dirname, '../..', filePath);

    // Read PDF file and convert to base64
    const pdfBuffer = fs.readFileSync(absPath);
    const pdfBase64 = pdfBuffer.toString('base64');

    // Prepare contract data for DocuSign
    const contractData = {
      name: contract.name || 'BFCA Contract',
      recipientEmail,
      recipientName: recipientName || recipientEmail,
      pdfBase64
    };

    // Send to DocuSign
    const docusignResult = await docusignService.sendEnvelope(contractData);

    // Update contract with DocuSign information
    contract.externalProvider = 'docusign';
    contract.externalAgreementId = docusignResult.envelopeId;
    contract.externalEnvelopeId = docusignResult.envelopeId;
    contract.recipientEmail = recipientEmail;
    contract.recipientName = recipientName || recipientEmail;
    contract.status = 'sent';
    contract.sentAt = new Date();
    contract.docusignStatus = docusignResult.status;
    contract.expiresAt = new Date(Date.now() + (30 * 24 * 60 * 60 * 1000)); // 30 days from now
    contract.updatedAt = new Date();

    await contract.save();

    res.json({ 
      msg: 'Contract sent for signature via DocuSign', 
      envelopeId: docusignResult.envelopeId, 
      status: docusignResult.status,
      recipientEmail,
      expiresAt: contract.expiresAt
    });

  } catch (error) {
    console.error('sendForSignature error:', error.message);
    res.status(500).json({ 
      msg: 'Failed to send contract for signature', 
      error: error.message 
    });
  }
};

// Download contract PDF
const downloadContract = async (req, res) => {
  try {
    const contract = await GeneratedContract.findById(req.params.id);
    if (!contract || !contract.generatedDocUrl) return res.status(404).json({ msg: 'Contract or PDF not found' });
    
    console.log('Contract found:', contract.name);
    console.log('Generated doc URL:', contract.generatedDocUrl);
    
    // Handle both relative and absolute URLs
    let filePath = contract.generatedDocUrl;
    if (filePath.startsWith('http')) {
      // If it's an absolute URL, extract the file path
      const url = new URL(filePath);
      filePath = url.pathname;
    }
    
    // Remove leading slash if present
    if (filePath.startsWith('/')) filePath = filePath.slice(1);
    
    // Extract just the filename from the path
    const fileName = filePath.split('/').pop();
    
    // Build the absolute path using the same structure as save
    // This ensures we look in the same place where files are saved
    const absPath = path.join(__dirname, '../uploads/contracts', fileName);
    
    console.log('Resolved file path:', absPath);
    console.log('File exists:', fs.existsSync(absPath));
    
    if (!fs.existsSync(absPath)) {
      console.error('PDF file not found at:', absPath);
      return res.status(404).json({ msg: 'PDF file not found on server' });
    }
    
    res.download(absPath, err => {
      if (err) {
        console.error('Download error:', err);
        res.status(500).send('Error downloading file');
      }
    });
  } catch (error) {
    console.error('Download contract error:', error);
    res.status(500).send('Server error');
  }
};

// Get contract signature status
const getContractStatus = async (req, res) => {
  try {
    const contract = await GeneratedContract.findById(req.params.id);
    if (!contract) return res.status(404).json({ msg: 'Contract not found' });

    if (contract.externalProvider === 'docusign' && contract.externalEnvelopeId) {
      try {
        const status = await docusignService.getEnvelopeStatus(contract.externalEnvelopeId);
        
        // Update contract status if it changed
        if (status.status !== contract.docusignStatus) {
          contract.docusignStatus = status.status;
          contract.updatedAt = new Date();
          
          // Map DocuSign status to our status
          if (status.status === 'completed') {
            contract.status = 'signed';
            contract.signedAt = new Date();
          } else if (status.status === 'declined') {
            contract.status = 'declined';
          } else if (status.status === 'voided') {
            contract.status = 'cancelled';
          } else if (status.status === 'expired') {
            contract.status = 'expired';
          }
          
          await contract.save();
        }

        res.json({
          contractId: contract._id,
          status: contract.status,
          docusignStatus: contract.docusignStatus,
          recipientEmail: contract.recipientEmail,
          sentAt: contract.sentAt,
          signedAt: contract.signedAt,
          expiresAt: contract.expiresAt
        });
      } catch (error) {
        console.error('Error getting DocuSign status:', error.message);
        res.json({
          contractId: contract._id,
          status: contract.status,
          docusignStatus: contract.docusignStatus,
          error: 'Failed to get latest status from DocuSign'
        });
      }
    } else {
      res.json({
        contractId: contract._id,
        status: contract.status,
        docusignStatus: contract.docusignStatus,
        recipientEmail: contract.recipientEmail,
        sentAt: contract.sentAt,
        signedAt: contract.signedAt,
        expiresAt: contract.expiresAt
      });
    }
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
};

// DocuSign webhook handler
const handleDocuSignWebhook = async (req, res) => {
  try {
    const eventData = req.body;
    const processedEvent = await docusignService.processWebhookEvent(eventData);
    
    // Find contract by envelope ID
    const contract = await GeneratedContract.findOne({ 
      externalEnvelopeId: processedEvent.envelopeId 
    });
    
    if (contract) {
      // Update contract status
      contract.docusignStatus = processedEvent.status;
      contract.updatedAt = new Date();
      
      // Add event to history
      contract.docusignEvents.push({
        event: processedEvent.event,
        timestamp: processedEvent.timestamp,
        data: eventData
      });
      
      // Update main status based on DocuSign status
      if (processedEvent.status === 'completed') {
        contract.status = 'signed';
        contract.signedAt = new Date();
      } else if (processedEvent.status === 'declined') {
        contract.status = 'declined';
      } else if (processedEvent.status === 'voided') {
        contract.status = 'cancelled';
      } else if (processedEvent.status === 'expired') {
        contract.status = 'expired';
      }
      
      await contract.save();
    }
    
    res.status(200).json({ msg: 'Webhook processed successfully' });
  } catch (error) {
    console.error('DocuSign webhook error:', error);
    res.status(500).json({ msg: 'Webhook processing failed' });
  }
};

// Delete a generated contract
const deleteGeneratedContract = async (req, res) => {
  try {
    await GeneratedContract.findByIdAndDelete(req.params.id);
    res.json({ msg: 'Contract deleted' });
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
};

module.exports = {
  getAllGeneratedContracts,
  getGeneratedContract,
  generateContract,
  sendForSignature,
  downloadContract,
  getContractStatus,
  handleDocuSignWebhook,
  deleteGeneratedContract,
}; 